#!/usr/bin/perl -w
# Copyright (c) 2010, Sine Nomine Associates
# 
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
# 
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

=head1 NAME

afsmon - AFS server monitor for SNIPS

=head1 SYNOPSIS

afsmon

=head1 DESCRIPTION

This is an AFS monitor for the SNIPS monitoring program. The AFS client programs
'bos', 'vos', and 'rxdebug' are required to run this monitor and should be
located on a local disk.

The following items are monitored,

=over 8

=item * fileserver status (bos status)

=item * fileserver calls waiting (busy status)

=item * percent used of partition disk space (vos listpart)

=back

See http://netplex-tech.com/snips/ for SNIPS downloads and
documentation.

=head1 INSTALLATION

Please refer to the SNIPS installation instructions.  Install this script to
the SNIPS binary directory (eg. /usr/local/snips/bin) and install the
afsmon-confg configuration file to the SNIPS configuration directory (eg.
/usr/local/snips/etc).  Edit the configuration file to specify which
fileservers to be monitored.

=head1 CONFIGURATION FILE

Specify one or more fileservers in the afsmon-conf configuration
file.

  fs <hostname>

afsmon options are specified as,

  option <option-type> <value>

The options types are,

  pollinterval - number of seconds between polls
  rrdtool - on | off
  domain - domain name of fileservers (optional)
  maxparts - max number of vice partitions per server (default 255)

The fully qualified paths to the AFS commands may be configured
with the 'cmd' option,

  cmd <command> <path>
  command = bos | vos | rxdebug
  path = fully qualified path to command

The SNIPS threshold values may be configured with the
'threshold' option.

  threshold <event-type> <warning> <error> <critical>
  event-type = calls_waiting | partition

=head2 Example Configuration File

    # general options
    option pollinterval 300  # seconds
    option rrdtool      off
    option domain       sinenomine.net
    option maxparts     26

    # paths to AFS commands, should be local
    cmd bos /usr/bin/bos
    cmd vos /usr/bin/vos
    cmd rxdebug /usr/bin/rxdebug

    # thresholds: warning, error, critical
    threshold calls_waiting  100 200 500
    threshold partition       80  90  95

    # fileservers
    fs pluto
    fs titan
    fs mars
    fs venus

=head1 SNIPS EVENT FIELDS

The SNIPS event data structure values used by afsmon,

  sender        = 'afsmon'
  device_name   = fileserver hostname
  device_addr   = fileserver hostname
  device_subdir = 'fs'
  var_name      = 'up' | 'calls_wait' | 'vicep*'
                  where * = a .. z, aa, ab, ...

=head1 AUTHOR

Michael Meffie <meffie@sinenomien.net>

=head1 COPYRIGHT

Copyright (c) 2010, Sine Nomine Associates
All rights reserved.

This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

=cut

use strict;

my $snipsroot;
my $debug = 2;
my $domain = "";
my @partition_ids;
my ($bos,$vos,$rxdebug);
my %fileservers;
my $thresholds = {
  'calls_waiting' => [100, 200, 500],
  'partition'     => [80,  90,  95],
};


BEGIN {
  $snipsroot = "/usr/local/snips"   unless $snipsroot;	# SET_THIS
  push (@INC, "$snipsroot/etc");
  push (@INC, "$snipsroot/bin");
  require "snipsperl.conf";
}

use SNIPS;

snips_main(\&init, \&dopoll, undef);

sub debug
{
  print STDERR ("(debug) ", @_, "\n") if $debug;
}

#
# Initialization of the afs monitor. Reads the config file, sets up
# the snips event data file.
#
sub init
{
  my $line = 0;
  my $maxparts = 255;
  my %cmd;
  my %seen;
  my $id;
  my $count = 0;

  open(CONFIG,"<$s_configfile") or die("Couldn't find $s_configfile, exiting");
  while (<CONFIG>) {
    ++$line;
    chomp;
    next if /^\s*\#/; 	# skip comments
    next if /^\s*$/;	# skip blank lines

    if (/^\s*option\s+pollinterval\s+(\d+)/i)  {
      $s_pollinterval = $1;
      next;
    }
    if (/^\s*option\s+RRDTOOL\s+ON/i)  {
      $SNIPS::dorrd = 1;
      next;
    }
    if (/^\s*option\s+RRDTOOL\s+OFF/i) {
      $SNIPS::dorrd = 0;
      next;
    }
    if (/^\s*option\s+maxparts\s+(\d+)/i) {
      $maxparts = $1;
      next;
    }
    if (/^\s*option\s+domain\s+(\S+)/i) {
      $domain = $1;
      $domain = ".$domain" unless $domain=~/^\./;
      next;
    }
    if (/^\s*cmd\s+(\S+)\s+(\S+)/) {
      if (! -x $2) {
        die "Missing command $1: $2\n";
      }
      $cmd{$1} = $2;
      next;
    }
    if (/^\s*threshold\s+(\S+)\s+(\d+)\s+(\d+)\s+(\d+)/) {
      $thresholds->{$1} = [$2, $3, $4];
      next;
    }
    if (/^s*fs\s+(\S+)/) {
      my $hostname = $1;
      if ($fileservers{$hostname}) {
        print STDERR "warning: ignoring duplicate hostname on line $line\n";
	next;
      }
      my $fs = {
        'hostname'    => $hostname,
        'last_update' => 0,
      };
      $fileservers{$hostname} = $fs;
      next;
    }
    print STDERR "warning: ignoring bad config line ($line): $_\n";
  }
  close CONFIG;

  # generate a table of partition ids (a .. z, aa, ab, etc)
  foreach $id ('a' .. 'z') {
    last if ++$count > $maxparts;
    push(@partition_ids, $id);
  }
  foreach my $c1 ('a' .. 'z') {
    foreach my $c2 ('a' .. 'z') {
      last if ++$count > $maxparts;
      push(@partition_ids, $c1 . $c2);
    }
  }

  # afs commands
  $bos = $cmd{'bos'} || 'bos';
  $vos = $cmd{'vos'} || 'vos';
  $rxdebug = $cmd{'rxdebug'} || 'rxdebug';

  create_event_file();
}

#
# Called periodically to perform checks and update
# the snips event data file.
#
sub dopoll
{
  foreach my $fs (values %fileservers) {
    $fs->{'last_update'} = time();
    check_fileserver_status($fs);
    if ($fs->{'up'} == 0) {
      check_calls_waiting($fs);
      check_partitions($fs);
    }
    else {
      $fs->{'calls_waiting'} = undef;
      $fs->{'partitions'} = {};
    }
  }
  update_event_file();
  return 1;
}

#
# Check the fileserver status via bos status.
#
sub check_fileserver_status
{
  my $fs = shift;
  my $hostname = $fs->{'hostname'} . $domain;
  my $cmd = "$bos status $hostname fs -long -noauth";
  my $status = 0;
  my $value = 4;
  my $maxsev = $E_CRITICAL;

  debug("running: $cmd");
  if (!open(BOS, "$cmd |")) {
    $value = 4; # failed to contact
  }
  else {
    while (<BOS>) {
      chomp;
      if (/^Instance .*, \(type is fs\) (.*)/) {
        my $s = $1;
        if ($s =~ /currently running normally/) {
          $value = 0;  # 0 is ok
	}
        elsif ($s =~ /temporarily disabled, currently shutdown/) {
          $value = 1;
	}
        elsif ($s =~ /disabled, currently shutdown/) {
          $value = 2;
	}
	else {
          $value = 3;
	}
	last;
      }
    }
    close BOS;
  }
  $fs->{'up'} = $value,
}

#
# Check the file server busy status via rxdebug.
#
sub check_calls_waiting {
  my $fs = shift;
  my $hostname = $fs->{'hostname'} . $domain;
  my $value = undef;
  my $cmd = "$rxdebug $hostname 7000 -rxstats -noconns";

  debug("running: $cmd");
  if (open(RXDEBUG, "$cmd |")) {
    while (<RXDEBUG>) {
      chomp;
      if (/^(\d+) calls waiting/) {
	 debug("calls_waiting=$1");
	 $value = $1;
	 last;
      }
    }
    close RXDEBUG;
  }
  $fs->{'calls_waiting'} = $value;
}

#
# Retrieve the list of fileserver partitions and the
# total and free space.
#
sub check_partitions
{
  my $fs = shift;
  my $hostname = $fs->{'hostname'} . $domain;
  my $status = 0;
  my $value = 100;

  # Clear the info from the last check, so partitions
  # deleted are not displayed.
  $fs->{'partitions'} = {};
  my $cmd = "$vos partinfo $hostname -noauth";
  debug("running: $cmd");
  if (open(VOS, "$cmd |")) {
    while (<VOS>) {
      chomp;
      if (/Free space on partition \/vicep([a-z][a-z]?): (\d+) K blocks out of total (\d+)/) {
        my $partition = $1;
	my $free = $2;
	my $total = $3;
	my $used = $total - $free;
	debug("hostname=$hostname, partition=$partition, ".
	      "free=$free, used=$used, total=$total");
	$fs->{'partitions'}->{$partition} = {
	  'free' => $free,
	  'used' => $used,
	  'total' => $total,
	};
	last;
      }
    }
    close VOS;
  }
}

#
# Calculate the fs up/down status.
#
sub calc_fs_status
{
  my $fs = shift;
  my $status = 0;
  my $value = $fs->{'up'};
  my $thres = 0;
  my $msev = $E_CRITICAL;
  if ($value == 0) {
    $status = 1;     # fs is up
  }
  return ($status, $value, $thres, $msev);
}

#
# Calculate the "calls waiting" status.
#
sub calc_calls_waiting_status
{
  my $fs = shift;
  my $value = $fs->{'calls_waiting'};
  my ($warn,$err,$crit) = @{$thresholds->{'calls_waiting'}};
  my ($status, $thres, $msev);
  if (defined($value)) {
    ($status, $thres, $msev) = calc_status($value, $warn, $err, $crit);
  }
  else {
    $value = 0;
    ($status, $thres, $msev) = (0, 0, $E_CRITICAL);
  }
  return ($status, $value, $thres, $msev);
}

#
# Calculate the partition usage status.
#
sub calc_partition_status
{
  my $p = shift;
  my ($used, $total) = ($p->{'used'}, $p->{'total'});
  my ($status, $value, $thres, $msev) = (0, 0, 0, $E_CRITICAL);
  my ($warn,$err,$crit) = @{$thresholds->{'partition'}};
  if ($total) {
    $value = int(($used / $total) * 100);
    ($status, $thres, $msev) = calc_status($value, $warn, $err, $crit);
  }
  return ($status, $value, $thres, $msev);
}

#
# Create the SNIPS event data file which is updated
# by this monitor periodically and is read by the
# SNIPS tools to process status changes.
#
# Since SNIPS does not make it very easy to monitor
# a variable number of items, a simplifying approach
# is create a fixed number of event records and set the
# 'do not display' flag on event records which are
# not in use.  To limit the number of empty records,
# the max number of partitions can be set in the config
# file.
#
sub create_event_file
{
  $s_sender = 'afsmon';

  my $datafd = open_datafile($s_datafile, "w");
  my $event = new_event();
  alter_event($event, $s_sender, undef, undef, undef, undef, undef);

  foreach my $fs (values %fileservers) {
    my $device = $fs->{'hostname'};
    my $addr = $fs->{'hostname'};

    my %unpacked = unpack_event($event);
    $unpacked{state} &= ~$n_NODISPLAY; # present
    $event = pack_event(%unpacked);

    # server up/down (bos status)
    alter_event($event, $s_sender, $device, $addr, "fs", "up", "");
    write_event($datafd, $event);

    # rx calls waiting (rxdebug)
    alter_event($event, $s_sender, $device, $addr, "fs", "calls_wait", "");
    write_event($datafd, $event);

    # partitions, percent used
    my %unpacked = unpack_event($event);
    $unpacked{state} |= $n_NODISPLAY; # assume not present
    $event = pack_event(%unpacked);

    foreach my $id (@partition_ids) {
      alter_event($event, $s_sender, $device, $addr, "fs", "vicep$id", "");
      write_event($datafd, $event);
    }
  }
  close_datafile($datafd);
}

#
# Called periodically to update the event data file records for
# each fileserver and partition.  Update the display flag
# for partition records to show when the partition is present.
#
sub update_event_file
{
  my $packed_event;
  my $i = 1;

  my $datafd = open_datafile($s_datafile, "r+"); # read + write
  while (($packed_event = read_event($datafd))) {
    my ($status, $value, $thres, $msev) = (0, 0, 0, $E_CRITICAL);
    my %event = unpack_event($packed_event);

    if ($debug > 1) {
      debug("event:");
      foreach my $k (keys(%event)) {
        debug(" $k => ". $event{$k});
      }
      debug("");
    }

    if ($event{'device_subdev'} eq "fs") {
      my $hostname = $event{'device_addr'};
      my $fs = $fileservers{$hostname};
      unless ($fs) {
        print STDERR "error: failed to lookup fileserver data for $hostname\n";
	next;
      }
      if ($event{'var_name'} eq "up") {
        ($status, $value, $thres, $msev) = calc_fs_status($fs);
      }
      elsif ($event{'var_name'} eq "calls_wait") {
        ($status, $value, $thres, $msev) = calc_calls_waiting_status($fs);
      }
      elsif ($event{'var_name'} =~ /vicep(\w+)/) {
        my $id = $1;
	if ($fs->{'partitions'}->{$id}) {
	  my $p = $fs->{'partitions'}->{$id};
          $event{'state'} &= ~$n_NODISPLAY; # present
          ($status, $value, $thres, $msev) = calc_partition_status($p);
	}
	else {
          $event{'state'} |= $n_NODISPLAY; # not present
	}
      }
      else {
        print STDERR "afsmon: unknown variable: ". $event{"device_subdev"} ."\n";
      }
    }
    else {
      print STDERR "afsmon: unknown sub-device: ". $event{"device_subdev"} ."\n";
    }

    $packed_event = pack_event(%event);

    update_event($packed_event, $status, $value, $thres, $msev); # determine severity
    rewrite_event($datafd, $packed_event);                       # write to disk
  }
  close_datafile($datafd);
}

