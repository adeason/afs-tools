#!/usr/bin/perl -w
#
# Find volumes which contain dirty directory objects.
#
# A dirty directory object is a directory which contains non-zero bytes in
# unused areas of the physical directory object.  Directory pages were not
# cleared before reuse before OpenAFS 1.6.20 which could pollute unused areas
# of directory objects with fragments of removed file and directory names, even
# from other volumes.
#
# This tool uses vos, volscan, and the afs-tools dirobj to search for volumes
# which have dirty directory objects. Read-write volumes can be cleaned with
# the salvager with the -salvagedirs option.
#
# The dirobj tool is available at https://github.com/openafs-contrib/afs-tools
#
# Must be run as root on the file server.
#

use strict;
use File::Basename;
use Getopt::Long;

my $MYNAME=__FILE__;
my $OPT_VERBOSE = 0;      # Output progress messages.
my $OPT_CHECKOUT = 0;     # Checkout the volumes as busy while scanning.
my @OPT_VTYPES = ();  # Volume types to checks.

my $PATH = '/usr/sbin:/usr/bin:/usr/afs/bin:/usr/local/bin';
my $DIRTYDIRS = __FILE__;
my $HAVE_VOS_BUSY_EXEC = 0;

sub which {
    my $name = shift;
    my ($cmd) = grep { -x $_ } map { "$_/$name" } split(/:/, $PATH);
    unless ($cmd) {
        die "Cannot find $name executable.";
    }
    return $cmd;
}
my $VOS = which('vos');
my $VOLINFO = which('volinfo');
my $VOLSCAN = which('volscan');
my $DIROBJ = which('dirobj');


sub scan_directory {
    my ($namei) = @_;
    my $ndirty = 0;

    if ($OPT_VERBOSE > 1) {
        print "scanning dir $namei\n";
    }
    open(my $pipe, "$DIROBJ dump $namei |") or die "Failed to run dirobj: $!";
    while (<$pipe>) {
        if (/^\s*garbage: (\S+)$/) {
            print if $OPT_VERBOSE > 2;
            $ndirty += length($1);
        }
    }
    close($pipe);
    return $ndirty;
}

sub scan_volume {
    my ($partid, $vid, $vtype) = @_;
    my @vtypes = ('rw', 'ro', 'bk');
    my $ndirty = 0;
    my $pvid;

    if ($OPT_VERBOSE) {
        print "scanning volume $vid\n";
    }

    if ($OPT_CHECKOUT) {
        my $cmd = "$VOS offline -server localhost -partition $partid -id $vid -localauth";
        my $rc = system($cmd);
        if ($rc != 0) {
            warn "Failed to run vos offline: $rc";
            return;
        }
    }

    my $vtypeid = 0;
    my $cmd = "$VOLINFO -part $partid -volume $vid";
    open(my $pipe, "$cmd |") or die "Failed to run volinfo: $!";
    while (<$pipe>) {
        chomp;
        $vtypeid = $1 if /^type = (\d+)/;
        $pvid = $1 if /parentId = (\d+)/;
    }
    close($pipe);
    $vtype = $vtypes[$vtypeid];

    $cmd = "$VOLSCAN -part $partid -volume $vid -find dir -output namei -noheading";
    open($pipe, "$cmd |") or die "Failed to run volscan: $!";
    while (<$pipe>) {
        chomp;
        $ndirty += scan_directory($_);
    }
    close($pipe);

    printf("%s %s %s %s %d\n", $partid, $vtype, $vid, $pvid, $ndirty);

    if ($OPT_CHECKOUT) {
        my $cmd = "$VOS online -server localhost -partition $partid -id $vid -localauth";
        my $rc = system($cmd);
        if ($rc != 0) {
            die "Failed to run vos online: $rc";
        }
    }
}

sub scan_partition {
    my ($partid) = @_;
    my $vid;

    if ($OPT_VERBOSE) {
        print "scan partition: $partid\n";
    }
    open(my $pipe, "$VOS listvol -server localhost -partition $partid -fast -localauth|")
        or die "Failed to run vos: $!";
    while (<$pipe>) {
        chomp;
        if (/^(\d+)/) {
            $vid = $1;
        }
    }
    close($pipe);
}

sub scan_partitions {
    my $opt_part = ($_[0] ? "-partition $_[0]" : "");
    my $partid;
    my $vname;
    my $vid;
    my $vtype;

    if ($OPT_VERBOSE) {
        print "scan partitions\n";
    }

    open(my $pipe, "$VOS listvol -server localhost $opt_part -localauth|")
        or die "Failed to run vos: $!";
    while (<$pipe>) {
        chomp;
        if (/^\s*$/) {
            next;
        }
        if (/^Total .* partition \/vicep(\w+)/) {
            $partid = $1;
            next;
        }
        if (/^(\S+)\s+(\d+)\s+(\S+)/) {
            $vname = $1;
            $vid = $2;
            $vtype = lc($3);
            if ($OPT_VERBOSE > 1) {
                print "partid=$partid, vname=$vname, vtype=$vtype, vid=$vid\n";
            }
            if (grep(/^$vtype$/, @OPT_VTYPES)) {
                scan_volume($partid, $vid, $vtype);
            }
            next;
        }
    }
    close($pipe);
}

sub usage {
    my $progname = basename($MYNAME);
    print "usage: $progname all [--checkout] [--rw] [--ro] [--bk] [-v|--verbose]\n";
    print "usage: $progname part <partid> [--checkout] [--rw] [--ro] [--bk] [-v|--verbose]\n";
    print "       $progname vol <partid> <vid> [--checkout] [-v|--verbose]\n";
    exit(1);
}

sub main {
    my $cmd = shift(@ARGV) or usage();
    my @verbose = ();
    my ($rw, $ro, $bk);
    GetOptions(
        "v|verbose" => \@verbose,  # Additional -v flags increase the verbosity.
        "checkout" => \$OPT_CHECKOUT,
        "rw" => \$rw,
        "ro" => \$ro,
        "bk" => \$bk,
        "vtype=s" => \@OPT_VTYPES,
    ) or usage();

    $OPT_VERBOSE = scalar(@verbose);
    if ($rw) {
        push(@OPT_VTYPES, 'rw');
    }
    if ($ro) {
        push(@OPT_VTYPES, 'ro');
    }
    if ($bk) {
        push(@OPT_VTYPES, 'bk');
    }
    if (scalar(@OPT_VTYPES) == 0) {
        @OPT_VTYPES = ('rw', 'ro', 'bk');
    }

    if ($cmd eq 'all') {
        scan_partitions();
    } elsif ($cmd eq 'part') {
        my $partid = shift(@ARGV) or usage();
        scan_partitions($partid);
    } elsif ($cmd eq 'vol') {
        my $partid = shift(@ARGV) or usage();
        my $vid = shift(@ARGV) or usage();
        scan_volume($partid, $vid, undef);
    } else {
        usage();
    }
}

main();
