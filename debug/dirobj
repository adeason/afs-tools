#!/usr/bin/perl -w
# Copyright (c) 2012-2016, Sine Nomine Associates
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

=head1 NAME

dirobj - decode an AFS3 directory object

=head1 SYNOPSIS

B<dirobj> dump [I<filename>]

B<dirobj> list [I<filename>]

B<dirobj> stats [I<filename>]

=head1 DESCRIPTION

B<dirobj> decodes AFS3 directory objects for debugging and troubleshooting.

An AFS3 directory object contains a list of tuples of directory entry names and
corresponding AFS3 file vnode and unique identifiers.  AFS3 clients perform
path lookups by fetching the entire directory object from the server and
performing lookups of the AFS3 file identifier (FID) by directory entry name.

The same encoding of directory objects is used to represent directories on the
wire, on OpenAFS file server partitions, within the OpenAFS cache manager file
cache, and within OpenAFS volume dump streams.

AFS3 directory objects suffer from limits imposed by the encoding and
inefficiencies due to data fragmentation. This tool may be useful in
determining how many more directory entries may be added to a directory.

For a complete description of the AFS3 directory object format, see
http://www.ietf.org/archive/id/draft-keiser-afs3-directory-object-00.txt

=head1 OPTIONS

=over 8

=item B<dump>

Dump the contents of the directory object in a human readable text format for
debugging purposes.

=item B<list>

List the directory entries. Lists the vnodes, uniquifiers, and the directory
entry names for each entry in the directory object.

=item B<stats>

Analyze the directory object to report used and available space.

=item I<filename>

Filename of an AFS3 directory object. This can be obtained from the client
cache or the file server vice partition.  B<dirobj> will read from the C<stdin>
stream when B<filename> is not given.

=back

=head1 EXAMPLES

Directory objects can be extracted from the fileserver partitions (with root
access to the fileserver) or from the cache managers file-based cached (with
AFS access to the directory and root access to the local file system.)

It is possible to extract directory objects from volume dumps, but I do not
know of a convenient way to do this at this time.  The CMU afsdump-scan tool
will print directory listings and extract files from dumps, but does not
currently extract directory object as binary blobs.

=head2 Server directory objects

The OpenAFS B<volscan> tool can be used to find directory objects on the
fileserver. Root access is required.

Use the B<volscan> B<-find> C<dir> option to search for directory objects and
give the B<-output> C<namei> option to print the path of the files which
contain the directory objects.  The B<-part> and B<-volume> options may be
given to narrow the search to a given partition and volume.

For example, To find the directory corresponding to the FID C<536870921.3.207>,

    # volscan -volume 536870921 -part a -find dir -output fid namei | grep 536870921.3.207
    536870921.3.207 /vicepa/AFSIDat/7/7+++U/+/+/1++++wA

The directory object can be decoded with B<dirobj>,

    # /usr/local/bin/dirobj dump /vicepa/AFSIDat/7/7+++U/+/+/1++++wA
    ...

=head2 Client directory objects

The OpenAFS cache manager stores directory objects in the local file cache
(e.g. /usr/vice/cache), when running in file-based cache mode.  The OpenAFS
cache manager never splits directory objects into multiple chunks.

The B<afs-tools> B<cisearch> tool can be used to find cache files which contain
directory objects for given FIDs.  Root access on the local filesystem is
required, and AFS access to the directories of interest are required.

Use B<fs examine> to find the AFS FID of the directory. (The FID consists of
the volume number, the vnode number, and the uniquifier.  Vnode numbers of
directories are always odd.)

    $ fs examine /afs/example.com/xyzzy/plugh
    File /afs/example.com/xyzzy/plugh (536870918.205.118) contained in volume 536870918
    ...

Use B<cisearch> to find the cache index number, then B<find> to find the path
to the file which contains the directory object.

    $ sudo /usr/local/bin/cisearch /usr/vice/cache/CacheItems 0.536870918.205.118
    ...
    search for cell 0 vol 536870918 vnode 205 uniq 118
    index 206396 (fid 4.536870918.205.118)

    $ sudo find /usr/vice/cache -name V206396
    /usr/vice/cache/D100/V206396

Finally, B<dirobj> may be used to examine the directory object.

    $ sudo /usr/local/bin/dirobj dump /usr/vice/cache/D100/V206396
    ...

=head1 SEE ALSO

    AFS-3 Directory Object Type Definition
    http://www.ietf.org/archive/id/draft-keiser-afs3-directory-object-00.txt

=head1 COPYRIGHT

Copyright (c) 2012-2016, Sine Nomine Associates

=cut

my $VERSION = "2.000";
use strict;
use warnings;

use constant {
    MAGIC        => 1234,   # header magic number
    PAGESIZE     => 2048,   # the size of each page in an AFS-3 directory object (in octets)
    OLDMAXPAGES  => 128,    # the maximum number of pages in a legacy directory object
    MAXPAGES     => 1023,   # the maximum number of pages in a directory object
    NHASHENT     => 128,    # number of hash buckets in the entry name hash table
    RECSIZE      => 32,     # number of octets in a record
    EPP          => 64,     # number of records per page
    DHE          => 12,     # number of records taken up in page 0 by the directory header
    OLDNAMESIZE  => 16,     # number of octets for a name in a legacy dirent record
    MAXNAMELEN   => 256,    # maximum directory entry name length supported (excluding the nul)
};

#
# Find the number of records needed to store a name.
#
# This is the same algorithm used by clients to list directory entries and
# servers when adding new entries.  See afs_dir_NameBlobs() in OpenAFS
# src/dir/dir.c.
#
# Note: Unfortunately, this calculation allocates more extension records than
# are actually needed for certain name lengths.  For example, a name of 16 to
# 19 bytes long should fit into one record, but in practice an extra and unused
# extension record is allocated.
#
sub name_to_records
{
    my $name = shift;  # nul terminated
    my $nbytes = length($name) + 1;
    return (1 + int(($nbytes + (OLDNAMESIZE - 1)) / RECSIZE));
}

#
# Find the range of lengths which can be stored in the given number of records.
#
# This is the inverse of name_to_records. It returns the range of name sizes
# which can be stored in the given number of records.
#
sub records_to_names
{
    my $records = shift;
    my $min = (RECSIZE * $records) - (RECSIZE + OLDNAMESIZE);
    my $max = (RECSIZE * ($records + 1)) - (RECSIZE + OLDNAMESIZE) - 1;
    $min = 1 if $min < 1;
    $max = MAXNAMELEN if $max > (MAXNAMELEN);
    return ($min, $max);
}

#
# Calculate the percent fragmentation.
#
sub percent_frag
{
    my $free = shift;
    my $largest = shift;
    my $pf = 0;
    if ($free > 0) {
        $pf = 1.0 - ($largest / $free);
    }
    return int($pf * 100.0);
}


#
# Helper to dump dirheader entries.
#
sub dump_entries
{
    my $name = shift;
    my $nil = shift;
    my $i = 0;

    printf("\t%s: {\n", $name);
    foreach my $x (@_) {
        # Skip empty entries to trim output.
        if ($x != $nil) {
            printf("\t\t%d: %d\n", $i, $x);
        }
        $i++;
    }
    printf("\t}\n");
}

#
# Dump the directory to a human readable format for debugging.
#
# It would probably be better to format the output as yaml or or some
# such format, but this is just used for debugging for now.
#
sub dirobj_dump
{
    my $fh = shift;
    my $page = 0;

    PAGE: for (;;) {
        my $buffer;
        my $record = 0;
        my $offset = 0;

        my $nbytes = read($fh, $buffer, PAGESIZE);
        last PAGE if $nbytes == 0 && $page != 0;
        die "Failed to read page: $!" if $nbytes != PAGESIZE;

        # First record contains the page header.
        my ($pgcount, $tag, $r1, $bitmap, $r2) = unpack("nnCb64C19", $buffer);
        my ($hex) = unpack("H64", $buffer);
        $record++;

        die "Not a directory object." if $tag != MAGIC;
        my @allocated = split(//, $bitmap);

        printf("page %u, pageheader {\n".
               "\tpgcount: %d\n".
               "\ttag: %d\n".
               "\tbitmap: %s\n".
               "\thex: %s\n}\n",
               $page, $pgcount, $tag, $bitmap, $hex);

        # First page contains the directory header.
        if ($page == 0) {
            $offset = $record * RECSIZE;
            my @pagemap = unpack("x${offset}" . "C" . OLDMAXPAGES, $buffer);
            my @hashchain = unpack("x". ($offset + OLDMAXPAGES) . "n" . NHASHENT, $buffer);
            $record += DHE;

            printf("page %u, dirheader {\n", $page);
            dump_entries("pagemap", 64, @pagemap);
            dump_entries("hashchain", 0, @hashchain);
            printf("}\n");
        }

        # Decode the records. Determine which ones are extents, and format those
        # differently.
        while ($record < EPP) {
            $offset = $record * RECSIZE;
            my ($flags, $r, $next, $vnode, $uniq, $name) = unpack("x${offset}CCnNNZ20", $buffer);
            my ($hex) = unpack("x${offset}H64", $buffer);
            my ($text) = unpack("x${offset}a32", $buffer);

            my $nconts = 0;
            if ($allocated[$record]) {
                my ($extname) = unpack("x${offset}x12Z256", $buffer);
                $nconts = name_to_records($extname) - 1;
            }

            my $garbage;
            if ($allocated[$record]) {
                ($garbage) = unpack("x${offset}x12a20", $buffer);
                if ($garbage =~ /\0/) {
                    $garbage =~ s/^.*?\0//;  # trim before the nul
                } else {
                    $garbage = "";
                }
            } else {
                $garbage = $text;
            }

            # Show unprintables as dots.
            $name =~ s/[^[:print:]]/./g;
            $text =~ s/[^[:print:]]/./g;

            # Strip nulls and show unprintables as dots.
            $garbage =~ s/\0//g;
            $garbage =~ s/[^[:print:]]/./g;

            # Regular record; allocated or free.
            printf("page %u, record %u {\n".
                "\ttype: dirent\n".
                "\talloc: %d\n".
                "\ttext: %s\n".
                "\tgarbage: %s\n".
                "\thex: %s\n".
                "\tfields: {\n".
                "\t\tflags: 0x%02x\n".
                "\t\treserved: 0x%02x\n".
                "\t\tnext: %u\n".
                "\t\tvnode: %u\n".
                "\t\tuniq: %u\n".
                "\t\tname: %s\n\t}\n}\n",
                $page, $record, $allocated[$record],
                $text, $garbage, $hex, $flags, $r, $next, $vnode, $uniq, $name);

            $record++;

            # Decode extension records, if any.
            while ($record < EPP && $nconts > 0) {
                $offset = $record * RECSIZE;
                my ($name) = unpack("x${offset}Z32", $buffer);
                my ($hex) = unpack("x${offset}H64", $buffer);
                my ($text) = unpack("x${offset}a32", $buffer);

                if ($allocated[$record]) {
                    $garbage = $text;
                    if ($garbage =~ /\0/) {
                        $garbage =~ s/^.*?\0//;  # trim before the nul
                    } else {
                        $garbage = "";
                    }
                } else {
                    $garbage = $text;
                }

                $name =~ s/[^[:print:]]/./g;
                $text =~ s/[^[:print:]]/./g;

                # Dont show nuls as garbage.
                $garbage =~ s/\0//g;
                $garbage =~ s/[^[:print:]]/./g;

                printf("page %u, record %u {\n".
                    "\ttype: cont\n".
                    "\talloc: %d\n".
                    "\ttext: %s\n".
                    "\tgarbage: %s\n".
                    "\thex: %s\n".
                    "\tfields: {\n".
                    "\t\textent: %s\n\t}\n}\n",
                    $page, $record, $allocated[$record],
                    $text, $garbage, $hex, $name);

                $nconts--;
                $record++;
            }
        }
        $page++;
        die "Exceeded max pages! $page pages found" if $page > MAXPAGES;
    }
}

#
# List the directory entries.
#
sub dirobj_list
{
    my $fh = shift;
    my $page = 0;

    PAGE: for (;;) {
        my $buffer;
        my $record = 0;

        my $nbytes = read($fh, $buffer, PAGESIZE);
        last PAGE if $nbytes == 0 && $page != 0;
        die "Failed to read page: $!" if $nbytes != PAGESIZE;

        my ($pgcount, $tag, $r1, $bitmap, $r2) = unpack("nnCb64C19", $buffer);
        $record++;

        die "Not a directory object." if $tag != MAGIC;
        my @allocated = split(//, $bitmap);

        # Skip the directory header.
        if ($page == 0) {
            $record += DHE;
        }

        RECORD: while ($record < EPP) {
            if ($allocated[$record]) {
                my $offset = $record * RECSIZE;
                my ($flags, $r, $next, $vnode, $uniq, $name) = unpack("x${offset}CCnNNZ256", $buffer);
                print "$vnode.$uniq $name\n";
                $record += name_to_records($name);
            } else {
                $record++;
            }
        }
        $page++;
        die "Exceeded max pages! $page pages found" if $page > MAXPAGES;
    }
}

#
# Find the directory used and available space.
#
sub dirobj_stats
{
    my $fh = shift;
    my $page = 0;
    my $entries = 0;
    my $records_used = 0;
    my $records_free = 0;
    my $maxslot = name_to_records('x' x MAXNAMELEN);
    my @bucket = ();   # free buckets
    my @ubucket = ();  # dirent name length buckets
    my @pfbucket = (); # percent frag buckets

    # clear counters
    foreach my $i (1 .. $maxslot) {
        $bucket[$i] = 0;
        $ubucket[$i] = 0;
    }
    foreach my $i (0 .. 9) {
        $pfbucket[$i] = 0;
    }

    PAGE: for (;;) {
        my $buffer;
        my $record = 0;

        my $nbytes = read($fh, $buffer, PAGESIZE);
        last PAGE if $nbytes == 0 && $page != 0;
        die "Failed to read page: $!" if $nbytes != PAGESIZE;

        my ($pgcount, $tag, $r1, $bitmap, $r2) = unpack("nnCb64C19", $buffer);
        my ($hex) = unpack("H64", $buffer);
        $record++;

        die "Not a directory object." if $tag != MAGIC;
        my @allocated = split(//, $bitmap);

        # Analyze the bitmap for free slots.
        foreach my $i (1 .. $maxslot) {
            my $needed = '0' x $i;
            my @slots = ($bitmap =~ /$needed/g);  # find slots for name size
            my $nslots = scalar(@slots);
            $bucket[$i] += $nslots;
        }

        # Analyze the block fragmentation of this page.
        my $free = scalar(grep(/0/, @allocated)); # number of free records in this page
        my @blocks = ($bitmap =~ /(0+)/g);        # blocks of free records in this page
        my $largest = 0;                          # size of largest free block
        foreach my $block (@blocks) {
             my $n = length($block);
             if ($n > $largest) {
                 $largest = $n;
             }
        }
        my $pf = percent_frag($free, $largest);
        $pf = 99 if $pf > 99; # put 100% in the 90..100 bucket.
        $pfbucket[int($pf/10)]++;

        # Skip the directory header.
        if ($page == 0) {
            $record += DHE;
        }

        RECORD: while ($record < EPP) {
            if ($allocated[$record]) {
                my $offset = $record * RECSIZE;
                my ($flags, $r, $next, $vnode, $uniq, $name) = unpack("x${offset}CCnNNZ256", $buffer);
                my ($hex) = unpack("x${offset}x12H512", $buffer);

                my $span = name_to_records($name);
                $entries++;
                $ubucket[$span]++;  # used bucket
                $records_used += $span;
                $record += $span;
            } else {
                $records_free++;
                $record++;
            }
        }

        $page++;
        die "Exceeded max pages! $page pages found" if $page > MAXPAGES;
    }

    if ($page < MAXPAGES) {
        my $empty_pages = MAXPAGES - $page;
        my $empty_bitmap = "1" . "0" x (EPP - 1);
        foreach my $i (1 .. $maxslot) {
            my $slot = '0' x $i;
            my @slots = ($empty_bitmap =~ /$slot/g);
            $bucket[$i] += scalar(@slots) * $empty_pages;
        }
    }

    my $records_total = $records_used + $records_free;
    my $pages_used = $page;
    my $pages_avail = MAXPAGES - $pages_used;
    printf("entries:       %6d\n".
           "pages used:    %6d\n".
           "pages avail:   %6d\n".
           "records total: %6d\n".
           "records used:  %6d\n".
           "records free:  %6d\n",
           $entries,
           $pages_used, $pages_avail,
           $records_total, $records_used, $records_free);
    printf("data fragmentation:\n".
           "\tpercent frag  pages\n".
           "\t============  =====\n");
    foreach my $i (0 .. 9) {
        my $a = $i * 10;
        my $b = $a + 9;
        $b = 100 if $b == 99;  # 100 in this bucket
        printf("\t%3d%% - %3d%%: %6d\n", $a, $b, $pfbucket[$i]);
    }
    printf("slots:\n".
           "\tname length    used   free\n".
           "\t===========   =====  =====\n");
    foreach my $i (1 .. $maxslot) {
        my ($a, $b) = records_to_names($i);
        printf("\t%3d - %3d:    %5d  %5d\n", $a, $b, $ubucket[$i], $bucket[$i]);
    }
}

#
# Print the command usage.
#
sub usage
{
    print "usage: dirobj dump [<filename>]\n";
    print "       dirobj list [<filename>]\n";
    print "       dirobj stats [<filename>]\n";
    print "       dirobj help\n";
    print "       dirobj version\n";
    print "\n";
    print "dirobj reads from stdin when <filename> is not given.\n";
}

#
# Main routine.
#
sub main
{
    my ($action, $filename) = @_;
    my $fh = *STDIN;
    my $code = 0;

    if ($action eq 'help') {
       usage();
       exit($code);
    }
    if ($action eq 'version') {
       print "$VERSION\n";
       exit($code);
    }

    if (defined($filename) && $filename ne '-') {
        open($fh, "<", $filename) or die("Cannot open $filename: $!");
    }

    if ($action eq 'dump') {
       dirobj_dump($fh);
    } elsif ($action eq 'list') {
       dirobj_list($fh);
    } elsif ($action eq 'stat' || $action eq 'stats') {
       dirobj_stats($fh);
    } else {
       usage();
       $code = 1;
    }

    if (defined($filename)) {
        close($fh);
    }
    exit($code);
}

# Command line options.
my $action = shift or usage(), exit(1);
my $filename = shift || "-";

main($action, $filename);

